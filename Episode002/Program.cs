namespace Episode002

/*
 * Преобразование  и приведение типов
 * Эпизод 004
 */

{
    internal class Program
    {
        static void Main(string[] args)
        {
            // Нужно давать переменным осмысленные имена, которые отражают их назначение.
            string userName = "John";
            int maxSize = 100;

            // Стили написания переменных:
            // UpperCamelCase (PascalCase) - используется для имен классов, методов и свойств.
            // lowerCamelCase - используется для имен переменных
            // snake_case - используется для имен переменных и функций в некоторых языках программирования.
            // UPPER_SNAKE_CASE - используется для имен констант
            // kebab-case - используется для имен файлов и URL, в C# использовать нельзя.
            // sHungarianNotation - используется для имен переменных в некоторых языках программирования, но в C# не рекомендуется. s - указывает тип переменной.

            // Неявное приведение типов
            byte byteValue = 100; // byte - это 8-битное целое число, диапазон от 0 до 255
            int intValue = byteValue; // Неявное приведение byte к int, безопасно, так как int может хранить все значения byte


            // Явное приведение типов
            int count = 10;
            byte byteCount = (byte)count; // Приведение int к byte, может привести к потере данных, если count больше 255

            // Если не возможно приведение типов, то нужно использовать методы явного преобразования типов
            string stringAge = "19";
            int age = Convert.ToInt32(stringAge); // Преобразование строки в целое число, может вызвать исключение, если строка не является числом
            int  age1 = int.Parse(stringAge); // Преобразование строки в целое число, может вызвать исключение, если строка не является числом

            // Неявное преобразование типов
            int implicitInt = 42; // int - это 32-битное целое число
            Console.WriteLine("Число равно " + implicitInt); // Выводит: Число равно 42. Число автоматически преобразуется в строку при конкатенации с другой строкой.
        }
    }
}
